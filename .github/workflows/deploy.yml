name: Deploy Raffley to VPS
env:
  MIX_ENV: prod

# Required GitHub Secrets:
# - VPS_HOST: Hostname/IP of your VPS server
# - VPS_SSH_USER: SSH username for VPS access
# - VPS_SSH_PRIVATE_KEY: SSH private key for authentication
# - VPS_DEPLOY_PATH: Absolute path to deployment directory on VPS
# - SECRET_KEY_BASE: Phoenix secret key base
# - DATABASE_URL: Database connection string
# - RESEND_API_KEY: API key for Resend email service
# - PHX_HOST: Hostname for the application

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '27'

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: Compile project
        run: mix compile --force

      - name: Build release
        run: mix release --overwrite

      - name: Archive release artifact
        run: |
          RELEASE_NAME=$(ls _build/prod/rel/)
          tar -czf release.tar.gz -C _build/prod/rel/$RELEASE_NAME .

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: raffley-release
          path: release.tar.gz

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Validate inputs
        run: |
          echo "Verifying required secrets..."
          if [ -z "${{ secrets.VPS_DEPLOY_PATH }}" ]; then
            echo "Error: VPS_DEPLOY_PATH secret is empty"
            echo "Please set this in GitHub repository secrets with the absolute path"
            echo "For example: /home/ubuntu/raffley"
            echo ""
            echo "To fix:"
            echo "1. Go to: Settings → Secrets and variables → Actions"
            echo "2. Add new repository secret named VPS_DEPLOY_PATH"
            echo "3. Enter the full deployment path"
            exit 1
          fi

          echo "✓ VPS_DEPLOY_PATH is set to: ${{ secrets.VPS_DEPLOY_PATH }}"
          echo "### Directory Verification ###"
            if [ -z "$DEPLOY_PATH" ]; then
              echo "Critical: DEPLOY_PATH is empty!"
              echo "This means GitHub isn't passing the secret properly"
              echo ""
              echo "Double check:"
              echo "1. The VPS_DEPLOY_PATH secret is set in GitHub"
              echo "2. The secret name matches exactly (case-sensitive)"
              echo "3. The secret has a valid absolute path value"
              exit 1
            fi

            echo "Checking write permission to: $DEPLOY_PATH"
            mkdir -p "$DEPLOY_PATH" || {
              echo "Failed to create directory"
              echo "Try creating manually on your VPS:"
              echo "  sudo mkdir -p '$DEPLOY_PATH'"
              echo "  sudo chown -R $USER:$USER '$DEPLOY_PATH'"
              exit 1
            }

            touch "$DEPLOY_PATH/deploy_test" || {
              echo "Cannot write to $DEPLOY_PATH"
              echo "Current permissions:"
              ls -ld "$DEPLOY_PATH"
              echo ""
              echo "Required fixes (run on VPS):"
              echo "1. sudo mkdir -p '$DEPLOY_PATH'"
              echo "2. sudo chown -R $USER:$USER '$DEPLOY_PATH'"
              echo "3. sudo chmod 755 '$DEPLOY_PATH'"
              exit 1
            }
            rm "$DEPLOY_PATH/deploy_test"
            echo "Verified write access to $DEPLOY_PATH"
            echo "1. Checking target directory permissions:"
            ls -ld "$DEPLOY_PATH" || echo "Directory doesn't exist"
            
            echo "2. Verifying write access:"
            if ! touch "$DEPLOY_PATH/.deploy_test" 2>/dev/null; then
              echo "Cannot write to $DEPLOY_PATH"
              echo "Current permissions:"
              ls -ld "$DEPLOY_PATH"
              echo "Suggested fix (run on VPS):"
              echo "  sudo mkdir -p '$DEPLOY_PATH'"
              echo "  sudo chown -R $USER:$USER '$DEPLOY_PATH'"
              exit 1
            else
              rm "$DEPLOY_PATH/.deploy_test"
              echo "Write access verified"
            fi
            
            echo "3. Checking sudo privileges:"
            if ! sudo -n true 2>/dev/null; then
              echo "Passwordless sudo access required"
              echo "Run on VPS: sudo visudo"
              echo "Add line: $USER ALL=(ALL) NOPASSWD: ALL"
              exit 1
            fi
            echo "Sudo access verified"

            echo "## SERVICE MANAGEMENT ##"
            echo "1. Checking current service status:"
            sudo systemctl status "$RELEASE_NAME.service" || true
            
            echo "2. Stopping service..."
            if ! sudo systemctl stop "$RELEASE_NAME.service"; then
              echo "⚠ Failed to stop service (may not exist yet)"
            fi
            echo "--- Cleaning Previous Deployment ---"
            [ -d "$RELEASE_DIR" ] && rm -rf $RELEASE_DIR/*
            [ -d "$RELEASE_DIR" ] && rm -rf $RELEASE_DIR/*
            mkdir -p "$RELEASE_DIR"

            echo "--- Deploying New Release ---"
            mv "$RELEASE_TAR" "$DEPLOY_PATH/"
            tar -xzf "$DEPLOY_PATH/$RELEASE_TAR" -C "$RELEASE_DIR"
            rm "$DEPLOY_PATH/$RELEASE_TAR"
            
            echo "Setting proper permissions..."
            find "$RELEASE_DIR" -type d -exec chmod 755 {} \;
            find "$RELEASE_DIR" -type f -exec chmod 644 {} \;
            chmod +x "$RELEASE_DIR/bin/$RELEASE_NAME"
            echo "--- Running Database Migrations ---"
            $RELEASE_DIR/bin/$RELEASE_NAME eval "Raffley.Release.migrate"

            echo "--- Starting Service ---"
            sudo systemctl start $RELEASE_NAME.service

            echo "--- Verifying Deployment ---"
            sleep 5
            systemctl is-active --quiet $RELEASE_NAME.service || \
              (echo "Service failed to start"; exit 1)
            echo "Deployment successful!"

            # Remote health check (optional)
            # curl -sSf http://localhost:4000/health >/dev/null || \
            #   (echo "Health check failed"; exit 1)

      - name: Notify Success
        if: success()
        run: echo "Deployment completed successfully"
        # Could add Slack/Email notification here

      - name: Notify Failure
        if: failure()
        run: echo "Deployment failed"
        # Could add error notification here
