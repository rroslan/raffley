name: Deploy Raffley to VPS
env:
  MIX_ENV: prod

# Required GitHub Secrets:
# - VPS_HOST: Hostname/IP of your VPS server
# - VPS_SSH_USER: SSH username for VPS access
# - VPS_SSH_PRIVATE_KEY: SSH private key for authentication
# - VPS_DEPLOY_PATH: Absolute path to deployment directory on VPS
# - SECRET_KEY_BASE: Phoenix secret key base
# - DATABASE_URL: Database connection string
# - RESEND_API_KEY: API key for Resend email service
# - PHX_HOST: Hostname for the application

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '27'

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: Compile project
        run: mix compile --force

      - name: Build release
        run: mix release --overwrite

      - name: Archive release artifact
        run: |
          RELEASE_NAME=$(ls _build/prod/rel/)
          tar -czf release.tar.gz -C _build/prod/rel/$RELEASE_NAME .

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: raffley-release
          path: release.tar.gz

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: raffley-release
          path: .

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          envs: '\
            DEPLOY_PATH:${{ secrets.VPS_DEPLOY_PATH }},\
            RELEASE_NAME:${{ secrets.RELEASE_NAME }}'
          script: |
            # Verify required environment variables
            if [ -z "$DEPLOY_PATH" ]; then
              echo "Error: DEPLOY_PATH not set"
              exit 1
            fi

            if [ -z "$RELEASE_NAME" ]; then
              RELEASE_NAME="raffley"
            fi

            RELEASE_DIR="$DEPLOY_PATH/_build/prod/rel/$RELEASE_NAME"
            RELEASE_TAR="release.tar.gz"

            echo "--- Preparing Deployment ---"
            # Ensure deployment directory exists
            mkdir -p $DEPLOY_PATH

            echo "--- Stopping Service ---"
            sudo systemctl stop $RELEASE_NAME.service || true

            echo "--- Cleaning Previous Deployment ---"
            [ -d "$RELEASE_DIR" ] && rm -rf $RELEASE_DIR/*
            mkdir -p $RELEASE_DIR

            echo "--- Deploying New Release ---"
            mv $RELEASE_TAR $DEPLOY_PATH/
            tar -xzf $DEPLOY_PATH/$RELEASE_TAR -C $RELEASE_DIR
            rm $DEPLOY_PATH/$RELEASE_TAR

            echo "--- Running Database Migrations ---"
            $RELEASE_DIR/bin/$RELEASE_NAME eval "Raffley.Release.migrate"

            echo "--- Starting Service ---"
            sudo systemctl start $RELEASE_NAME.service

            echo "--- Verifying Deployment ---"
            sleep 5
            systemctl is-active --quiet $RELEASE_NAME.service || \
              (echo "Service failed to start"; exit 1)
            echo "Deployment successful!"

            # Remote health check (optional)
            # curl -sSf http://localhost:4000/health >/dev/null || \
            #   (echo "Health check failed"; exit 1)

      - name: Notify Success
        if: success()
        run: echo "Deployment completed successfully"
        # Could add Slack/Email notification here

      - name: Notify Failure
        if: failure()
        run: echo "Deployment failed"
        # Could add error notification here
